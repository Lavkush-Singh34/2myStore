<!-- views/admin/users.ejs -->
<h1 class="text-2xl font-bold mb-8">User Management</h1>

<div class="bg-white rounded-lg shadow overflow-hidden">
    <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
            <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Joined</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
        </thead>
        <tbody id="usersTable" class="bg-white divide-y divide-gray-200">
            <!-- Users will be loaded here -->
        </tbody>
    </table>
</div>

<!-- Edit User Modal -->
<div id="userModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg w-full max-w-md p-6">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-bold">Edit User</h2>
            <button id="closeUserModalBtn" class="text-gray-500 hover:text-gray-700">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        <form id="userForm">
            <input type="hidden" id="userId">
            <div class="mb-4">
                <label for="userName" class="block text-gray-700 text-sm font-bold mb-2">Name</label>
                <input type="text" id="userName" name="name" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" required>
            </div>
            <div class="mb-4">
                <label for="userEmail" class="block text-gray-700 text-sm font-bold mb-2">Email</label>
                <input type="email" id="userEmail" name="email" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" required>
            </div>
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2">Role</label>
                <div class="flex items-center">
                    <input type="checkbox" id="isAdmin" name="isAdmin" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                    <label for="isAdmin" class="ml-2 block text-gray-700">Admin</label>
                </div>
            </div>
            <div class="flex justify-end">
                <button type="submit" class="bg-indigo-600 text-white py-2 px-4 rounded hover:bg-indigo-700">Save</button>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const userModal = document.getElementById('userModal');
        const closeUserModalBtn = document.getElementById('closeUserModalBtn');
        const userForm = document.getElementById('userForm');
        const usersTable = document.getElementById('usersTable');
        
        // Load users
        loadUsers();
        
        // Close modal
        closeUserModalBtn.addEventListener('click', function() {
            userModal.classList.add('hidden');
        });
        
        // Form submission
        userForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const userId = document.getElementById('userId').value;
            const user = {
                name: document.getElementById('userName').value,
                email: document.getElementById('userEmail').value,
                isAdmin: document.getElementById('isAdmin').checked
            };
            
            try {
                const response = await fetch(`/api/admin/users/${userId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(user)
                });
                
                if (!response.ok) {
                    throw new Error('Failed to update user');
                }
                
                // Reload users and close modal
                await loadUsers();
                userModal.classList.add('hidden');
            } catch (error) {
                console.error('Error updating user:', error);
                alert('Error updating user: ' + error.message);
            }
        });
        
        // Load users
        async function loadUsers() {
            try {
                const response = await fetch('/api/admin/users');
                const users = await response.json();
                
                usersTable.innerHTML = '';
                
                users.forEach(user => {
                    const row = document.createElement('tr');
                    const date = new Date(user.createdAt);
                    const formattedDate = date.toLocaleDateString();
                    
                    row.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${user.name}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${user.email}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${user.isAdmin ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}">
                                ${user.isAdmin ? 'Admin' : 'User'}
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${formattedDate}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button class="text-indigo-600 hover:text-indigo-900 edit-user-btn" data-id="${user._id}">Edit</button>
                        </td>
                    `;
                    usersTable.appendChild(row);
                });
                
                // Add edit event listeners
                document.querySelectorAll('.edit-user-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        editUser(this.getAttribute('data-id'));
                    });
                });
            } catch (error) {
                console.error('Error loading users:', error);
                alert('Error loading users: ' + error.message);
            }
        }
        
        // Edit user
        async function editUser(id) {
            try {
                const response = await fetch(`/api/admin/users/${id}`);
                const user = await response.json();
                
                document.getElementById('userId').value = user._id;
                document.getElementById('userName').value = user.name;
                document.getElementById('userEmail').value = user.email;
                document.getElementById('isAdmin').checked = user.isAdmin;
                
                userModal.classList.remove('hidden');
            } catch (error) {
                console.error('Error loading user details:', error);
                alert('Error loading user details: ' + error.message);
            }
        }
    });
</script>